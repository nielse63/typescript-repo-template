#!/usr/bin/env node
const fs = require('fs');
const fsp = require('fs/promises');
const path = require('path');
const readline = require('readline');
const cp = require('child_process');

const exec = (cmd) => {
  return new Promise((resolve, reject) => {
    cp.exec(cmd, (error, stdout, stderr) => {
      if (error) {
        return reject(new Error(stderr));
      }
      resolve(`${stdout}`.trim());
    });
  });
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const ask = (message, defaultValue = '') => {
  return new Promise((resolve) => {
    let prompt = `${message}`;
    if (defaultValue) {
      prompt = `${prompt} [${defaultValue}]`;
    }
    prompt = `${prompt}: `;
    rl.question(prompt, (answer) => {
      resolve(answer || defaultValue);
    });
  });
};

const isDryRun = process.argv.includes('--dry-run');
const pwd = path.resolve(__dirname, '../..');
const dirname = path.basename(pwd);
const templatesDir = path.join(__dirname, 'templates');
const files = [
  'package.json',
  'package-lock.json',
  'README.md',
  '.github/settings.yml',
];
const templates = [...files].map((file) =>
  path.join(templatesDir, `${file}.tpl`)
);

const prompt = async () => {
  const name = await ask('Repo Name', dirname);
  const defaultUser = await exec(
    'git config --get "credential.https://github.com.username"'
  );
  const user = await ask('GitHub User', defaultUser);
  const defaultAuthorName = await exec('git config --get "user.name"');
  const defaultAuthorEmail = await exec('git config --get "user.email"');
  const author = await ask(
    'Author',
    `${defaultAuthorName} <${defaultAuthorEmail}>`
  );
  const description = await ask('Description');
  const keywords = (await ask('Keywords'))
    .split(',')
    .map((word) => word.trim());
  rl.close();
  console.log({ name, user, author, description, keywords, version: '1.0.0' });
  return { name, user, author, description, keywords, version: '1.0.0' };
};

const findAndReplaceInFile = async (file, hash) => {
  if (!fs.existsSync(file)) {
    return;
  }
  const content = await fsp.readFile(file, 'utf-8');
  let newContent = content;
  Object.entries(hash).forEach(([key, value]) => {
    let stringValue = value;
    if (Array.isArray(value)) {
      if (file.endsWith('.json.tpl')) {
        stringValue = JSON.stringify(value);
      } else {
        stringValue = value.join(', ');
      }
    }
    newContent = newContent.replace(new RegExp(`{{${key}}}`, 'g'), stringValue);
  });
  const basename = file
    .replace(templatesDir, '')
    .replace(/^\//, '')
    .replace(/\.tpl$/, '');
  const dest = path.join(pwd, basename);
  console.log(`writing ${basename}`);
  if (!isDryRun) {
    await fsp.writeFile(dest, newContent);
  }
};

const setup = async () => {
  const answers = await prompt();
  const promises = templates.map((file) => {
    return findAndReplaceInFile(file, answers);
  });
  await Promise.all(promises);
};

setup().catch(console.error);
