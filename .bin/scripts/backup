#!/usr/bin/env node
const fsp = require('fs/promises');
const path = require('path');
const pkg = require('../../package.json');

const pwd = path.resolve(__dirname, '../..');
const templatesDir = path.join(__dirname, 'templates');
const files = [
  'package.json',
  'package-lock.json',
  'README.md',
  '.github/settings.yml',
  'LICENSE',
];
const templates = [...files].reduce((output, file) => {
  const dest = path.join(templatesDir, `${file}.tpl`);
  return {
    ...output,
    [path.basename(file)]: dest,
  };
}, {});
const sources = [...files].map((file) => path.join(pwd, file));

// const getPackageJson = async () => {
//   const content = await fsp.readFile(path.join(pwd, 'package.json'), 'utf-8');
//   return JSON.parse(content);
// };

const createTemplateFromStringFile = async (file, answers) => {
  const content = await fsp.readFile(file, 'utf-8');
  let newContent = content;
  Object.entries(answers).forEach(([key, value]) => {
    const stringValue = Array.isArray(value) ? value.join(', ') : value;
    newContent = newContent.replace(new RegExp(stringValue, 'g'), `{{${key}}}`);
  });
  const basename = path.basename(file);
  await fsp.writeFile(templates[basename], newContent);
};

const createTemplateFromJsonFile = async (file, answers) => {
  const content = await fsp.readFile(file, 'utf-8');
  let newContent = content;
  Object.entries(answers).forEach(([key, value]) => {
    const stringValue = Array.isArray(value) ? value.join(', ') : value;
    newContent = newContent.replace(new RegExp(stringValue, 'g'), `{{${key}}}`);
  });
  if (newContent.includes('"keywords"')) {
    const json = JSON.parse(newContent);
    json.keywords = '{{keywords}}';
    newContent = JSON.stringify(json, null, '  ').replace(
      /"{{keywords}}"/g,
      '{{keywords}}'
    );
  }
  const basename = path.basename(file);
  await fsp.writeFile(templates[basename], newContent);
};

const copySourceToTemplate = async (answers) => {
  const promises = sources.map(async (file) => {
    console.log(`writing ${path.basename(file)}`);
    if (file.endsWith('.json')) {
      return createTemplateFromJsonFile(file, answers);
    } else {
      return createTemplateFromStringFile(file, answers);
    }
  });
  await Promise.all(promises);
};

const backup = async () => {
  // const pkg = await getPackageJson();
  const [ignore1 = '', authorEmail = ''] = pkg.author.match(/<(.*?)>/) || [];
  const [ignore2 = '', authorName = ''] =
    pkg.author.match(/\b(.*?)\s(?=<)/) || [];
  const answers = {
    name: pkg.name,
    user: 'nielse63',
    author: pkg.author,
    description: pkg.description,
    keywords: pkg.keywords,
    version: pkg.version,
    year: '2023',
    authorEmail,
    authorName,
  };
  await copySourceToTemplate(answers);
};

backup().catch(console.error);
